// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/select4lists.h"
#include <dplyr.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// select_list_impl
List select_list_impl(List l, CharacterVector vars);
static SEXP _select4lists_select_list_impl_try(SEXP lSEXP, SEXP varsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type l(lSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vars(varsSEXP);
    rcpp_result_gen = Rcpp::wrap(select_list_impl(l, vars));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _select4lists_select_list_impl(SEXP lSEXP, SEXP varsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_select4lists_select_list_impl_try(lSEXP, varsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _select4lists_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*select_list_impl)(List,CharacterVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _select4lists_RcppExport_registerCCallable() { 
    R_RegisterCCallable("select4lists", "_select4lists_select_list_impl", (DL_FUNC)_select4lists_select_list_impl_try);
    R_RegisterCCallable("select4lists", "_select4lists_RcppExport_validate", (DL_FUNC)_select4lists_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_select4lists_select_list_impl", (DL_FUNC) &_select4lists_select_list_impl, 2},
    {"_select4lists_RcppExport_registerCCallable", (DL_FUNC) &_select4lists_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_select4lists(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
